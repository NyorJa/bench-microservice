version: '3'

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  mongo_data:
    driver: local


services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    # networks:
    #   - spring-cloud-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411


  postgres:
    image: postgres
    container_name: postgres-keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    # networks:
    #   - spring-cloud-network

  mysql-container:
    image: mysql:5.7
    container_name: mysql-container
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - 3600:3600
      - 3306:3306
    # networks:
    #   - spring-cloud-network

  # mysql-eight:
  #   image: mysql:8.0
  #   container_name: mysql-eight
  #   volumes:
  #     - mysql2_data:/var/lib/mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: mysql
  #   ports:
  #     - 3601:3601
  #     - 3307:3307
  #   networks:
  #     - spring-cloud-network

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    # networks:
    #   - spring-cloud-network

  vault:
    image: vault
    container_name: vault
    ports:
      - "8200:8200"
    restart: always
    environment:
      - 'VAULT_ADDR=http://localhost:8200'
    volumes:
      - D:\docker\vault\volumes\logs:/vault/logs
      - D:\docker\vault\volumes\file:/vault/file
      - D:\docker\vault\volumes\config:/vault/config
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
    # networks:
    #   - spring-cloud-network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 8180:8080
    depends_on:
      - postgres
    # networks:
    #   - spring-cloud-network

  configuration-server:
    container_name: configuration-server
    build:
      context: ./configuration-server/configuration-server
    ports:
      - 8888:8888 
    # networks:
    #   - spring-cloud-network

  eureka:
    container_name: eureka
    build:
      context: ./discovery-server/discovery-server
    ports:
      - 8761:8761
    # networks:
    #   - spring-cloud-network


  # elk:
  #   image: sebp/elk:7.13.2
  #   container_name: elk
  #   ports:
  #     - 5601:5601
  #     - 9200:9200
  #     - 5044:5044
  #   environment:
  #     - ELASTICSEARCH_USER=elastic
  #     - ELASTICSEARCH_PASSWORD=changeme
  #     - LOGSTASH_USER=elastic
  #     - LOGSTASH_PASSWORD=changeme
  #     - KIBANA_USER=kibana
  #     - KIBANA_PASSWORD=changeme

  elasticsearch:
    image: elasticsearch:7.13.2
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node

  logstash:
    image: logstash:7.13.2
    container_name: logstash
    # volumes:
    #   - ./logstash/:/usr/share/logstash/config/
    ports:
      - 5000:5000
    depends_on:
      - elasticsearch
  
  kibana:
    image: kibana:7.13.2
    container_name: kibana
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch



  # api-gateway-service:
  #   container_name: api-gateway-service
  #   build:
  #     context: ./api-gateway-service/api-gateway-service
  #   restart: on-failure
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - eureka
  #     - keycloak
  #   environment:
  #     - JAVA_OPTS=
  #       -DKEYCLOAK_URI=http://keycloak:8080/auth/realms/microservices-realm
  #       -DEUREKA_URI=http://eureka:8761/eureka/
  #   networks:
  #     - spring-cloud-network

  # product-service:
  #   container_name: product-service
  #   build:
  #     context: ./product-service/product-service
  #   restart: on-failure
  #   ports:
  #     - 8091:8091
  #   environment:
  #     - JAVA_OPTS=
  #       -DCONFIG_URI=http://configuration-server:8888
  #       -DVAULT_HOST=vault
  #       -DMONGO_HOST=mongo
  #       -DRABBIT_HOST=rabbitmq
  #       -DKEYCLOAK_URI=http://keycloak:8080/auth/realms/microservices-realm
  #       -DEUREKA_URI=http://eureka:8761/eureka/
  #   depends_on:
  #     - eureka
  #     - configuration-server
  #     - rabbitmq
  #     - vault
  #     - mongo
  #   networks:
  #     - spring-cloud-network

  # order-service:
  #   container_name: order-service
  #   build:
  #     context: ./order-service/order-service
  #   restart: on-failure
  #   ports: 
  #     - 8092:8092
  #   environment:
  #     - JAVA_OPTS=
  #       -DCONFIG_URI=http://configuration-server:8888
  #       -DVAULT_HOST=vault
  #       -DMONGO_HOST=mongo
  #       -DRABBIT_HOST=rabbitmq
  #       -DKEYCLOAK_URI=http://keycloak:8080/auth/realms/microservices-realm
  #       -DEUREKA_URI=http://eureka:8761/eureka/
  #       -DMYSQL_URI=jdbc:mysql://mysql-container:3306/order_service
  #   depends_on:
  #     - eureka
  #     - rabbitmq
  #     - vault
  #     - mysql-container
  #     - configuration-server
  #   networks:
  #     - spring-cloud-network

  # inventory-service:
  #   container_name: inventory-service
  #   build:
  #     context: ./inventory-service/inventory-service
  #   restart: on-failure
  #   ports:
  #     - 8183:8183
  #   environment:
  #     - JAVA_OPTS=
  #       -DCONFIG_URI=http://configuration-server:8888
  #       -DVAULT_HOST=vault
  #       -DRABBIT_HOST=rabbitmq
  #       -DKEYCLOAK_URI=http://keycloak:8080/auth/realms/microservices-realm
  #       -DEUREKA_URI=http://eureka:8761/eureka/
  #       -DMYSQL_URI=jdbc:mysql://mysql-container:3306/inventory_service&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
  #   depends_on:
  #     - eureka
  #     - rabbitmq
  #     - vault
  #     - mysql-container
  #     - configuration-server

  # notification:
  #   container_name: notification-service
  #   build:
  #     context: ./notification-service/notification-service
  #   restart: on-failure
  #   ports:
  #     - 8093:8093
  #   depends_on:
  #     - zipkin
  #   environment:
  #     - JAVA_OPTS=
  #       -DZIPKIN_URI=http://zipkin:9411/
  #       -DEUREKA_URI=http://eureka:8761/eureka/
  #   networks:
  #     - spring-cloud-network

    


networks:
  spring-cloud-network:
    driver: bridge